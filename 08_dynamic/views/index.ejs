<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적폼 전송</title>
    <style>
      body {
        background-color: skyblue;
      }

      .result {
        font-size: 1.5rem;
        font-weight: 700;
      }
    </style>
    <!-- 1. jQuery CDN (ajax 사용을 위한) -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>

    <!-- 2. axios CDN (axios 사용을 위한) -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>동적폼 연습하기</h1>
    <!-- 이름과 성별을 입력받는 폼 -->
    <form name="register">
      <input
        type="text"
        name="name"
        required
        placeholder="이름을 입력해주세요."
      />
      <br />
      성별
      <input type="radio" name="gender" id="male" value="남자" required />
      <label for="male">남성</label>
      <input type="radio" name="gender" id="female" value="여자" required />
      <label for="female">여성</label>
      <br /><br />
      <button type="button" onclick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax POST 제출</button>
      <br />
      <button type="button" onclick="axiosGet()">axios GET 제출</button>
      <button type="button" onclick="axiosPost()">axios POST 제출</button>
      <br />
      <button type="button" onclick="fetchGet()">fetch GET 제출</button>
      <button type="button" onclick="fetchPost()">fetch POST 제출</button>
      <br />

      <!-- 동적폼 전송 결과를 보여줄 곳 -->
      <div class="result"></div>

      <a href="/open-api">open api 사용해보기</a>
      <a href="/axios-get-register">실습1. axios get 회원가입</a>
      <a href="/axios-post-login">실습2. axios post 로그인</a>
    </form>
    <script>
      const resultBox = document.querySelector(".result");
      /* 1. ajax */
      // 1-1. ajax get
      function ajaxGet() {
        const form = document.forms["register"];

        // console.log(form);
        // console.log(form.name);
        // console.log(form.gender); // 배열 형태
        // console.log(form.male);

        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "get",
          url: "/ajax",
          data: data,
          success: function (res) {
            console.log(res); // 요청을 하고 받아온 data
            resultBox.textContent = `GET ajax 요청 완료! : ${res.name}님의 성별은 ${res.gender}입니다.`;
            resultBox.style.color = "red";
          },
          error: function (err) {
            console.log("ajax 실패");
          },
        });
      }
      // 1-2. ajax post
      function ajaxPost() {
        const form = document.forms["register"];

        // 서버로 보낼 데이터
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "post",
          url: "/ajax",
          data: data,
          success: function (res) {
            console.log(res);
            resultBox.textContent = `POST ajax 요청 완료! : ${res.name}님의 성별은 ${res.gender}입니다.`;
            resultBox.style.color = "orange";
          },
        });
      }

      /* 2. axios */
      // 2-1-1. axios get then, catch
      //   function axiosGet() {
      //     const form = document.forms["register"];

      //     const data = {
      //       name: form.name.value,
      //       gender: form.gender.value,
      //     };

      //     // type button의 유효성 검사: checkValidity() (기본 제공되는 것)
      //     /*
      //       form 안에 required 표시된 부분이 있으면 기입이 됐는지 안됐는지 검사
      //       - required가 있는 항묵에 대해서 기입이 되었다면 true반환, 안되었다면 false반환
      //       - required가 없는 항목에 대해서는 무조건 true 반환
      //       */
      //     console.log(form.name.checkValidity());
      //     console.log(form.gender[0].checkValidity());
      //     console.log(form.gender[1].checkValidity());

      //     // if문을 통한 유효성 검사
      //     if (!form.name.checkValidity()) {
      //       // 이름을 입력하지 않았을 경우
      //       resultBox.textContent = form.name.validationMessage; // "이 입력란을 작성하세요." (기본 제공되는 것)
      //       resultBox.textContent = "이름을 입력해주세요."; // 커스텀 메세지
      //     } else if (!form.gender[0].checkValidity()) {
      //       // 성별을 선택하지 않았을 경우
      //       resultBox.textContent = form.gender[0].validationMessage; // "다음 옵션 중 하나를 선택하세요."
      //       resultBox.textContent = "성별을 선택해주세요."; // 커스텀 메세지
      //     } else {
      //       // 모든 값 채웠을 때 axios 요청
      //       axios({
      //         method: "GET",
      //         url: "/axios",
      //         params: data, // get 일 때는 params로 데이터 전달
      //       })
      //         .then(function (res) {
      //           // ajax에서 success였던 부분이 axios에서는 then
      //           console.log(res); // 실제로 사용하는 데이터 아님 (이건 staus, headers등 많은 것이 들어있음)
      //           console.log(res.data); // res.send가 준 값 (실제로 사용하게 될 데이터)

      //           // 구조 분해 할당 ${res.data.name} -> ${name}, ${res.data.gender} -> ${gender}
      //           const { name, gender } = res.data;
      //           resultBox.textContent = `GET axios 요청 완료! : ${name}님의 성별은 ${gender}입니다.`;
      //           resultBox.style.color = "green";
      //         })
      //         .catch((err) => console.log(err));
      //     }
      //   }

      // 2-1-2. axios get async await
      async function axiosGet() {
        const form = document.forms["register"];

        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // type button의 유효성 검사: checkValidity() (기본 제공되는 것)
        /*
          form 안에 required 표시된 부분이 있으면 기입이 됐는지 안됐는지 검사
          - required가 있는 항묵에 대해서 기입이 되었다면 true반환, 안되었다면 false반환
          - required가 없는 항목에 대해서는 무조건 true 반환
          */
        console.log(form.name.checkValidity());
        console.log(form.gender[0].checkValidity());
        console.log(form.gender[1].checkValidity());

        // if문을 통한 유효성 검사
        if (!form.name.checkValidity()) {
          // 이름을 입력하지 않았을 경우
          resultBox.textContent = form.name.validationMessage; // "이 입력란을 작성하세요." (기본 제공되는 것)
          resultBox.textContent = "이름을 입력해주세요."; // 커스텀 메세지
        } else if (!form.gender[0].checkValidity()) {
          // 성별을 선택하지 않았을 경우
          resultBox.textContent = form.gender[0].validationMessage; // "다음 옵션 중 하나를 선택하세요."
          resultBox.textContent = "성별을 선택해주세요."; // 커스텀 메세지
        } else {
          try {
            const response = await axios({
              method: "GET",
              url: `/axios?name=${data.name}&gender=${data.gender}`, // params쓰지 않고 url에 한번에 전달 가능
              //   params: data,
            });
            console.log(response.data);
            const { name, gender } = response.data;
            resultBox.textContent = `GET axios 요청 완료! : ${name}님의 성별은 ${gender}입니다.`;
            resultBox.style.color = "green";
          } catch (err) {
            console.log("err: ", err);
          }
        }
      }

      // 2-2. axios post async await
      async function axiosPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const response = await axios({
            method: "post",
            url: "/axios",
            data: data,
          });
          console.log(response.data);
          const { name: 이름, gender: 성 } = response.data;
          resultBox.style.color = "blue";
          resultBox.textContent = `POST axios 요청 완료! : ${이름}님의 성별은 ${성}입니다.`;
        } catch (err) {
          console.log(err);
        }
      }

      /* 3. fetch */
      // 3-1. fetch get then catch (then 두개)
      function fetchGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // fetch(url, (요청과 관련된 데이터)) get 요청일 때는 ()안에 비워도 됨
        // fetch get일땐 데이터는 무조건 url에 붙여서 보내야 함

        // fetch(`/fetch?name=${data.name}&gender=${data.gender}`, {
        //   method: "get",
        // }).then(function (response) {
        //   console.log(response);
        // });
        fetch(`/fetch?name=${data.name}&gender=${data.gender}`)
          .then(function (response) {
            // 여기에서의 response는 HTTP 응답 전체를 나타내는 객체
            // 따라서 본문 콤텐트를 추출하기 위해서 사용하는 메서드 : json(), text()
            // 응답을 받는 게 객체형태라면 json(), 텍스트형태라면 text()
            console.log(response);
            return response.json(); // fetch로 들어온 response는 바로 쓸 수 없음. 변환 작업 거쳐야 함
          })
          .then(function (result) {
            console.log(result);
            resultBox.style.color = "coral";
            resultBox.textContent = `GET fetch 요청 완료! : ${result.name}님의 성별은 ${result.gender}입니다.`;
          })
          .catch((err) => console.log(err));
      }
      // 3-2. fetch post async await (await 두개)
      async function fetchPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await fetch("/fetch", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            // data를 post요청으로 보낼 때는 object -> JSON으로 변경해서 보냄냄
            body: JSON.stringify(data), // object가 아닌 json객체로 변경해서 넘겨줄 것임
          });
          console.log(res);

          const result = await res.json();
          console.log(result);
          resultBox.style.color = "lime";
          resultBox.textContent = `POST fetch 요청 완료! : ${result.name}님의 성별은 ${result.gender}입니다.`;
        } catch (err) {
          console.log("err: ", err);
        }
      }
    </script>
  </body>
</html>
